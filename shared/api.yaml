openapi: 3.0.3
info:
  title: TrainIt
  version: 1.0.ÃŸ

servers:
  - url: 'http://localhost:8085/api'

paths:
  /login/{userName}/{password}:
    get:
      operationId: checkLogin
      description: Check if User is known
      parameters:
        - $ref: '#/components/parameters/userName'
        - $ref: '#/components/parameters/password'
      responses: 
        200:
          $ref: '#/components/responses/UserResponse'

  /login/create/{userName}/{password}:
    put:
      operationId: createUser
      description: create User if he does not already Exists
      parameters:
        - $ref: '#/components/parameters/userName'
        - $ref: '#/components/parameters/password'
      responses:
        200:
          description: ok
          content:
              application/json:
                schema:
                  type: string
        400:
          description: User is already known
          content:
              application/json:
                schema:
                  type: string

  /run/create/{runDto}:
    put:
      operationId: createRun
      parameters:
        - $ref: '#/components/parameters/runDto'
      responses:
        200:
          description: ok

  /calculation/timerange/{userId}/{timerange}:
    get:
      operationId: calculationOfTimerange
      parameters:
        - $ref: '#/components/parameters/userId'
        - $ref: '#/components/parameters/timerange'
      responses:
        200:
          description: ok
          content:
              application/json:
                schema:
                  type: object
                  $ref: '#/components/schemas/RunCalculationDto'

  /calculation/timerange/{userId}/{fromDate}/{toDate}:
    get:
      operationId: calculationOfIndividualTimerange
      parameters:
        - $ref: '#/components/parameters/userId'
        - $ref: '#/components/parameters/fromDate'
        - $ref: '#/components/parameters/toDate'
      responses:
        200:
          description: ok
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/RunCalculationDto'

  /calculation/{userId}/{numberOfLastRuns}:
    get:
      operationId: calculationOfLastRuns
      parameters:
        - $ref: '#/components/parameters/userId'
        - $ref: '#/components/parameters/numberOfLastRuns'
      responses:
        200:
          description: ok
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/RunCalculationDto'

components:
  responses:
    UserResponse:
      description: OK
      content:
          application/json:
            schema:
              type: object
              $ref: '#/components/schemas/RunnerDto'

  parameters:
    timerange:
      name: timerange
      in: path
      required: true
      schema:
        type:
        $ref: '#/components/schemas/Timerange'

    fromDate:
      name: fromDate
      in: path
      required: true
      schema:
        type: date
        pattern: /([0-9]{4})-(?:[0-9]{2})-([0-9]{2})/
        example: "2019-05-17"

    toDate:
      name: toDate
      in: path
      required: true
      schema:
        type: date
        pattern: /([0-9]{4})-(?:[0-9]{2})-([0-9]{2})/
        example: "2019-05-17"

    numberOfLastRuns:
      name: lastRuns
      in: path
      required: true
      schema:
        type: integer

    userName:
      name: userName
      in: path
      required: true
      schema:
        type: string

    password:
      name: password
      in: path
      required: true
      schema:
        type: string

    userId:
      name: userId
      in: path
      required: true
      schema:
        type: integer

    runDto:
      name: runDto
      in: path
      required: true
      schema:
        type: object
        $ref: '#/components/schemas/RunDto'
            
  schemas:
    RunnerDto:
      required:
        - "id"
        - "name"
        - "totalRuns"
      description: Return Object of an User
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        totalRuns:
          type: integer  

    RunDto:
      required:
        - "userId"
        - "kmNumber"
        - "seconds"
        - "date"
      description: Run-Object for create tuple
      type: object
      properties:
        userId:
              type: integer
        kmNumber:
              type: integer
        seconds:
              type: integer
        date:
              type: date
              pattern: /([0-9]{4})-(?:[0-9]{2})-([0-9]{2})/
              example: "2019-05-17"

    RunCalculationDto:
      required:
        - "avgSecondsPerKm"
        - "avgKm"
        - "totalRuns"
        - "dateTimeRange"
      type: object
      properties:
        avgSecondsPerKm:
              type: integer
        avgKm:
              type: number
        totalRuns:
              type: integer
        dateTimeRange:
              type: String

    Timerange:
      description: Schema for selected Timeranges
      type: string
      enum:
        - LAST_WEEK
        - LAST_TWO_WEEKS
        - LAST_MONTH
        - LAST_QUARTER
        - HALF_YEAR
        - LAST_YEAR